name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "17 3 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, macos-13]
        toolchain: ["1.38.0", stable, beta, nightly]
    env:
      RUSTFLAGS: "-D warnings"
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: Run tests
        run: |
          for features in "" "--features std" "--features public_imp" "--features std,public_imp"; do
            cargo clean; cargo test --release --no-default-features $features --all-targets --verbose
          done
      - name: Run with SSE4.2 + AVX2 target features
        run: |
          for features in "" "--features std" "--features public_imp" "--features std,public_imp"; do
            cargo clean
            RUSTFLAGS="-D warnings -C target-feature=+sse4.2" cargo test --release --no-default-features $features --all-targets --verbose
            cargo clean
            RUSTFLAGS="-D warnings -C target-feature=+avx2" cargo test --release --no-default-features $features --all-targets --verbose
          done
        shell: bash
        if: ${{ matrix.os != 'macos-latest'}}
      - name: Run tests with all features on nightly
        run: cargo test --release --all-features --all-targets --verbose
        if: ${{ matrix.toolchain == 'nightly'}}
      - name: Run test with all features and with SSE4.2 + AVX2 target features on nightly
        run: |
          cargo clean
          RUSTFLAGS="-D warnings -C target-feature=+sse4.2" cargo test --release --all-features --all-targets --verbose
          cargo clean
          RUSTFLAGS="-D warnings -C target-feature=+avx2" cargo test --release --all-features --all-targets --verbose
        shell: bash
        if: ${{ matrix.os != 'macos-latest' && matrix.toolchain == 'nightly' }}

  test-inlining-x86:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: ["1.38.0", stable, beta, nightly]
    defaults:
      run:
        working-directory: inlining
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: Install stable toolchain
        run: rustup toolchain add stable
      - name: Install rustfilt
        run: cargo +stable install rustfilt
      - name: Check if the expected fns are inlined
        run: |
          ./check-inlining.sh x86_64-unknown-linux-gnu expected-methods-x86-std.txt
          ./check-inlining.sh x86_64-unknown-linux-gnu expected-methods-x86-std.txt "--features public_imp"
          RUSTFLAGS="-C target-feature=+avx2" ./check-inlining.sh x86_64-unknown-linux-gnu expected-methods-x86-std-avx2.txt
          RUSTFLAGS="-C target-feature=+avx2" ./check-inlining.sh x86_64-unknown-linux-gnu expected-methods-x86-nostd-avx2.txt --no-default-features
          RUSTFLAGS="-C target-feature=+sse4.2" ./check-inlining.sh x86_64-unknown-linux-gnu expected-methods-x86-nostd-sse42.txt --no-default-features

  test-inlining-aarch64-enabled-by-default:
    runs-on: macos-latest
    strategy:
      matrix:
        # the neon target feature was unconditionally enabled for aarch64 in 1.61.0
        toolchain: [nightly, beta, stable, 1.61.0]
    defaults:
      run:
        working-directory: inlining
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: aarch64-unknown-linux-gnu, aarch64-apple-darwin
      - name: Install stable toolchain
        run: rustup toolchain add stable
      - name: Install rustfilt
        run: cargo +stable install rustfilt
      - name: Check if the expected fns are inlined
        run: |
          for target in aarch64-unknown-linux-gnu aarch64-apple-darwin
          do
            ./check-inlining.sh $target expected-methods-aarch64-neon.txt
            ./check-inlining.sh $target expected-methods-aarch64-neon.txt --no-default-features
            ./check-inlining.sh $target expected-methods-aarch64-neon.txt "--features public_imp"
          done
  test-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - name: Run cargo doc
        run: cargo doc --features public_imp
        env:
          RUSTDOCFLAGS: --cfg docsrs

  cross-build-arm-default:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: ["1.38.0", stable, beta, nightly]
        features: ["--features std", ""]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: arm-unknown-linux-gnueabi, aarch64-unknown-linux-gnu
      - name: Build
        run: |
          for target in arm-unknown-linux-gnueabi aarch64-unknown-linux-gnu
          do
            cargo build --no-default-features --target $target --verbose
            cargo build --no-default-features --target $target --verbose
          done

  cross-buildfeature-aarch64-neon:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [1.61.0, stable, beta, nightly]
        target: [aarch64-unknown-linux-gnu, aarch64-apple-darwin]
        features: ["--features std", ""]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: ${{ matrix.target }}
      - name: Build
        run: cargo build --no-default-features --target ${{ matrix.target }} ${{ matrix.features }} --verbose

  cross-build-i686:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [1.38.0, stable, nightly]
        rustflags:
          [
            "-D warnings",
            "-D warnings -C target-feature=+avx2",
            "-D warnings -C target-feature=+sse4.2",
          ]
    env:
      RUSTFLAGS: ${{ matrix.rustflags }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: i686-unknown-linux-gnu
      - name: Run tests
        run: |
          cargo build --no-default-features --target i686-unknown-linux-gnu --verbose
          cargo build --no-default-features --target i686-unknown-linux-gnu --verbose --features std
          cargo build --no-default-features --target i686-unknown-linux-gnu --verbose --features public_imp
          cargo build --no-default-features --target i686-unknown-linux-gnu --verbose --features std,public_imp
      - name: Run nightly tests
        run: |
          cargo build --no-default-features --target i686-unknown-linux-gnu --verbose --all-features
        if: ${{ matrix.toolchain == 'nightly' }}

  fmt_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt -- --check

  clippy_check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - name: Clippy - default
        run: cargo clippy --all-targets
      - name: Clippy - all features enabled
        run: cargo clippy --all-targets --all-features
      - name: Clippy - all features disabled
        run: cargo clippy --all-targets --no-default-features
