name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, nightly, "1.38.0"]
        arch: [x86_64] # GH runners are missing 32-bit build tools, so no i686
        features: ["", "--features std", "--features public_imp", "--features std,public_imp"]
        rustflags: ["", "-C target-feature=+avx2", "-C target-feature=+sse4.2"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}-${{ matrix.arch }}
            profile: minimal
            override: true
      - name: Run tests
        run: cargo test --no-default-features ${{ matrix.features }} --verbose
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

  test-inlining:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, nightly, "1.38.0"]
        arch: [x86_64] # GH runners are missing 32-bit build tools, so no i686
    defaults:
      run:
        working-directory: inlining
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable-${{ matrix.arch }}
            profile: minimal
            override: true
      - name: Install cargo-asm
        run: cargo install cargo-asm
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}-${{ matrix.arch }}
            profile: minimal
            override: true
      - name: Set default toolchain
        run: rustup default ${{ matrix.toolchain }}-${{ matrix.arch }}
      - name: Check if the expected fns are inlined
        run: |
          cargo clean;cargo asm|grep -v drop_in_place|diff -u expected-methods-x86-std.txt -
          cargo clean;RUSTFLAGS="-C target-feature=+avx2" cargo asm|grep -v drop_in_place|diff -u expected-methods-x86-std-avx2.txt -
          cargo clean;cargo asm --no-default-features|grep -v drop_in_place|diff -u expected-methods-x86-nostd-fallback.txt -
          cargo clean;RUSTFLAGS="-C target-feature=+avx2" cargo asm --no-default-features|grep -v drop_in_place|diff -u expected-methods-x86-nostd-avx2.txt -
          cargo clean;RUSTFLAGS="-C target-feature=+sse4.2" cargo asm --no-default-features|grep -v drop_in_place|diff -u expected-methods-x86-nostd-sse42.txt -

  test-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            profile: minimal
            override: true
      - name: Run cargo doc
        run:  cargo doc --features public_imp
        env:
          RUSTDOCFLAGS: --cfg docsrs

  cross-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, nightly, "1.38.0"]
        arch: [x86_64]
        target: [arm-unknown-linux-gnueabi, aarch64-unknown-linux-gnu]
        features: ["--features std", ""]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}-${{ matrix.arch }}
            target: ${{ matrix.target }}
            profile: minimal
            override: true
      - name: Build
        run: cargo build --no-default-features --target ${{ matrix.target }} ${{ matrix.features }} --verbose

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            profile: minimal
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --no-default-features