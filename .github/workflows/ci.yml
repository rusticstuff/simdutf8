name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "17 3 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [stable, nightly, "1.38.0"]
        features: ["", "--features std", "--features public_imp", "--features std,public_imp"]
        rustflags: ["", "-C target-feature=+avx2", "-C target-feature=+sse4.2"]
        exclude:
            - os: macos-latest
              rustflags: "-C target-feature=+avx2"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}
            profile: minimal
            override: true
      - name: Run tests
        run: cargo test --no-default-features ${{ matrix.features }} --verbose
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

  test-inlining:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, nightly, "1.38.0"]
    defaults:
      run:
        working-directory: inlining
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            profile: minimal
            override: true
      - name: Install cargo-asm
        run: cargo install cargo-asm
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}
            profile: minimal
            override: true
      - name: Set default toolchain
        run: rustup default ${{ matrix.toolchain }}
      - name: Check if the expected fns are inlined
        run: |
          cargo clean;cargo asm|grep -v drop_in_place|diff -u expected-methods-x86-std.txt -
          cargo clean;RUSTFLAGS="-C target-feature=+avx2" cargo asm|grep -v drop_in_place|diff -u expected-methods-x86-std-avx2.txt -
          cargo clean;cargo asm --no-default-features|grep -v drop_in_place|diff -u expected-methods-x86-nostd-fallback.txt -
          cargo clean;RUSTFLAGS="-C target-feature=+avx2" cargo asm --no-default-features|grep -v drop_in_place|diff -u expected-methods-x86-nostd-avx2.txt -
          cargo clean;RUSTFLAGS="-C target-feature=+sse4.2" cargo asm --no-default-features|grep -v drop_in_place|diff -u expected-methods-x86-nostd-sse42.txt -

  test-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            profile: minimal
            override: true
      - name: Run cargo doc
        run:  cargo doc --features public_imp
        env:
          RUSTDOCFLAGS: --cfg docsrs

  cross-build-arm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable, nightly, "1.38.0"]
        target: [arm-unknown-linux-gnueabi, aarch64-unknown-linux-gnu]
        features: ["--features std", ""]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}
            target: ${{ matrix.target }}
            profile: minimal
            override: true
      - name: Build
        run: cargo build --no-default-features --target ${{ matrix.target }} ${{ matrix.features }} --verbose

  cross-build-i686:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        toolchain: [stable, nightly]
        features: ["", "--features std", "--features public_imp", "--features std,public_imp"]
        rustflags: ["", "-C target-feature=+avx2", "-C target-feature=+sse4.2"]
        target: [i686-unknown-linux-gnu, i686-pc-windows-msvc]
        exclude:
          - os: ubuntu-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: i686-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}
            target: ${{ matrix.target }}
            profile: minimal
            override: true
      - name: Run tests
        run: cargo build --no-default-features ${{ matrix.features }} --target ${{ matrix.target }} --verbose
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

  fmt_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            profile: minimal
            components: rustfmt
            override: true
      - name: Checko formatting
        run: cargo fmt -- --check

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            profile: minimal
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --no-default-features